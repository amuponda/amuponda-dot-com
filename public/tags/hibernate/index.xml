<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Hibernate - Tag - A. Muponda</title>
        <link>https://amuponda.com/tags/hibernate/</link>
        <description>Hibernate - Tag - A. Muponda</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 04 Feb 2020 17:58:35 &#43;0000</lastBuildDate><atom:link href="https://amuponda.com/tags/hibernate/" rel="self" type="application/rss+xml" /><item>
    <title>Grails 3 datasource config with HibernateSpec</title>
    <link>https://amuponda.com/2020/02/04/grails-3-datasource-config-with-hibernatespec/</link>
    <pubDate>Tue, 04 Feb 2020 17:58:35 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://amuponda.com/2020/02/04/grails-3-datasource-config-with-hibernatespec/</guid>
    <description><![CDATA[The default implementation of HibernateSpec in Grails 3.3.x overrides the datasource&rsquo;s dbCreate value with create-drop. To get around this you simply override the getConfiguration method and set your preferred value for dbCreate. The properties in the map returned by this method take precedence to those in your application.yml
Map getConfiguration() { Collections.singletonMap(Settings.SETTING\_DB\_CREATE, &#34;create-drop&#34;) // change this } It is also worthwhile to note that your default datasource setup also take precedence over the test environment setup.]]></description>
</item>
</channel>
</rss>
