<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>vee-validate - Tag - A. Muponda</title>
        <link>https://amuponda.com/tags/vee-validate/</link>
        <description>vee-validate - Tag - A. Muponda</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Jan 2019 15:55:56 &#43;0000</lastBuildDate><atom:link href="https://amuponda.com/tags/vee-validate/" rel="self" type="application/rss+xml" /><item>
    <title>VeeValidate pretty field names error messages in</title>
    <link>https://amuponda.com/2019/01/15/veevalidate-pretty-field-names-error-messages-in/</link>
    <pubDate>Tue, 15 Jan 2019 15:55:56 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://amuponda.com/2019/01/15/veevalidate-pretty-field-names-error-messages-in/</guid>
    <description><![CDATA[By default VeeValidate uses the name or data-vv-name attributes of the input element for the field in error messages. For the field below:
&lt;input name=&#34;startDate&#34; v-validate=&#34;&#39;required&#39;&#34; type=&#34;text&#34;/&gt; &lt;span&gt;{{ errors.first(&#39;startDate&#39;) }}&lt;/span&gt; The error message when the start date is not specified would be: The startDate field is required, which is not exactly user friendly.
Step forward the data-vv-as attribute. As the docs put it, it specifies a pretty name for the field.]]></description>
</item>
<item>
    <title>Enabling inferred rules in VeeValidate 2.1.4</title>
    <link>https://amuponda.com/2018/12/23/enabling-inferred-rules-in-veevalidate-2.1.4/</link>
    <pubDate>Sun, 23 Dec 2018 16:33:49 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://amuponda.com/2018/12/23/enabling-inferred-rules-in-veevalidate-2.1.4/</guid>
    <description><![CDATA[If upgrading to VeeValidate 2.1.4 you will find that any of your form validation making use of inferred rules will be broken. This is because the functionality is now disabled by default.
To enable it again, you will need to set the validity flag to true when you install the plugin. This is shown below:
Vue.use(VeeValidate, { validity: true }); Fortunately, as you can see there is not much needed to get inferred rules working again.]]></description>
</item>
<item>
    <title>Making a field conditionally required with VeeValidate</title>
    <link>https://amuponda.com/2018/12/16/making-a-field-conditionally-required-with-veevalidate/</link>
    <pubDate>Sun, 16 Dec 2018 16:36:46 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://amuponda.com/2018/12/16/making-a-field-conditionally-required-with-veevalidate/</guid>
    <description><![CDATA[There are instances when you are using VeeValidate for form validation and you want a field to be required only if a certain condition is met. This blog post will illustrate how to achieve that in two different ways.
1. Using a computed property You can make use of a computed properties to return a dynamic validation expression.&lt;input name=&quot;email&quot; v-validate=&quot;rules&quot; /&gt;For the input element above the computed property rules would look something like this:computed: { rules () { let rulesExp = &quot;email&quot; return rulesExp += this.]]></description>
</item>
<item>
    <title>Vuejs using MDBootstrap&#39;s custom input with Vee-validate</title>
    <link>https://amuponda.com/2018/07/09/vuejs-using-mdbootstraps-custom-input-with-vee-validate/</link>
    <pubDate>Mon, 09 Jul 2018 18:59:50 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://amuponda.com/2018/07/09/vuejs-using-mdbootstraps-custom-input-with-vee-validate/</guid>
    <description><![CDATA[The vee-validate directive is used as follows: [html] {{ errors.first(&rsquo;email) }} [/html] Essentially, vee-validate creates an array of validation errors via the ErrorBag wrapper class and you can access that array in your template and javascript. MDBoostrap provides a custom input component, and according to the docs , for it to work with v-model, the inside the component should:
Bind the value attribute to a value prop - (check) you can pass in a value prop On input, emit its own custom input event with the new value - (check) it has a custom event called &lsquo;input&rsquo; fired whenever the @change and @input events occur on the nested input tag So combining the two you can change the html to this: [html] &lt;md-input v-validate=&quot;&lsquo;required|email&rsquo;&quot; name=&ldquo;email&rdquo; label=&ldquo;Email&rdquo; icon=&ldquo;envelope&rdquo; :value=&ldquo;email&rdquo; @input=&ldquo;email = $event&rdquo; /&gt; {{ errors.]]></description>
</item>
</channel>
</rss>
